using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using SharpSqlBuilder.Attributes;
using SharpSqlBuilder.Builders;
using SharpSqlBuilder.Extensions;
using SharpSqlBuilder.Maps;
using SharpSqlBuilder.Tests.Common;
using NUnit.Framework;

namespace SharpSqlBuilder.Tests
{
    [TestFixture]
    public class TestSqlBuilder
    {
        [Table("class1", Schema = "foo")]
        public class Class1
        {
            [Column("id")]
            [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
            public Guid Id { get; set; }

            [Column("auto")]
            [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
            public Guid Auto { get; set; }

            [ForeignKeyType(typeof(Class3))]
            [Column("value1")] public Guid Value1 { get; set; }
            [ForeignKeyType(typeof(Class4))]
            [Column("value2")] public string Value2 { get; set; }

            [Column("do_not_change")]
            [IgnoreUpdate]
            public DateTime DoNotChange { get; set; }
        }

        [Table("class2", Schema = "foo")]
        public class Class2
        {
            [Key] [Column("key")] public Guid Key { get; set; }

            [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
            [Column("key_db_generated")]
            public int DbGeneratedKey { get; set; }

            [Column("db_generated")]
            [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
            public Guid DbGenerated { get; set; }

            [Column("value1")] 
            public int Value1 { get; set; }
            [Column("value2")] public string Value2 { get; set; }
            [Column("code_generated")] public DateTime CodeGenerated { get; set; }

            [Column("do_not_change")]
            [IgnoreUpdate]
            public DateTime DoNotChange { get; set; }
        }

        [Table("class3", Schema = "foo")]
        public class Class3
        {
            [Key] [Column("key")] public Guid Key { get; set; }

           
            [Column("value1")] 
            public int Value1 { get; set; }
        }
        [Table("class4", Schema = "foo")]
        public class Class4
        {
            [Key] [Column("key")] public string Key { get; set; }

           
            [Column("value1")] 
            public int Value1 { get; set; }
        }
        
        [Test]
        public void SqlBuilder_Delete_Class1_EqualsExpected()
        {
            var table = new SqlTable<Class1>();
            var sqlOptions = new SqlOptions {Dialect = SqlDialect.Postgres95};
            var sqlBuilder = SqlBuilder.Delete.From(table).WhereKeysEquals().ReturnsAllValues();
            var actual = sqlBuilder.BuildSql(sqlOptions);
            var expected = @"
            DELETE FROM foo.class1
            WHERE
	            (@Id = class1.id)
            RETURNING id, auto, value1, value2, do_not_change
            ";
            Check(expected, actual);
        }

        [Test]
        public void SqlBuilder_Insert_EqualsExpected()
        {
            var table = new SqlTable<Class2>();
            var sqlOptions = new SqlOptions {Dialect = SqlDialect.Postgres95};
            var sqlBuilder = SqlBuilder.Insert.Into(table)
               .AllStaticValues()
               .OnKeysConflict()
               .DoUpdateAllStaticColumns()
               .Where(table[m => m.CodeGenerated].Excluded().LessThan(table[m => m.CodeGenerated].Column()))
               .ReturnsAutoGeneratedColumns();
            var actual = sqlBuilder.BuildSql(sqlOptions);
            var expected = @"
            INSERT INTO foo.class2
            (key, value1, value2, code_generated, do_not_change)
            VALUES (
                @Key,
                @Value1,
                @Value2,
                @CodeGenerated,
                @DoNotChange
            )
            ON CONFLICT (key, key_db_generated)
            DO UPDATE SET
                db_generated = EXCLUDED.db_generated,
                value1 = EXCLUDED.value1,
                value2 = EXCLUDED.value2,
                code_generated = EXCLUDED.code_generated,
                do_not_change = EXCLUDED.do_not_change
            WHERE
                (EXCLUDED.code_generated < class2.code_generated)
            RETURNING key_db_generated, db_generated
            ";
            Check(expected, actual);
        }

        [Test]
        public void SqlBuilder_Select_EqualsExpected()
        {
            var table = new SqlTable<Class1>();

            var order = new
            {
                Id = new OrderItem {Direction = OrderDirection.Asc, Index = 2},
                Value1 = new OrderItem {Direction = OrderDirection.Desc, Index = 1},
                DoNotChange = (OrderItem) null
            };
            var orderMap = OrderMap.FromOrder(table, order.GetType());
            var sqlFilter = SqlFilter.Construct(new {Ids = new[] {1, 2}, Value1 = "foo", Auto = (int?) null});

            var whereSql = new[]
            {
                Conditions.Or(sqlFilter[f => f.Ids].IsNull(), table[m => m.Id].EqualsAny(sqlFilter[f => f.Ids])),
                Conditions.Or(sqlFilter[f => f.Value1].IsNull(),
                    table[m => m.Value1].EqualsOne(sqlFilter[f => f.Value1]))
            };
            var sqlOptions = new SqlOptions {Dialect = SqlDialect.Postgres95};
            var sqlBuilder = SqlBuilder.Select()
               .Values(table)
               .From(table)
               .Where(whereSql)
               .Order(orderMap, order)
               .Offset(5)
               .LimitBy(10);


            var actual = sqlBuilder.BuildSql(sqlOptions);
            var expected = @"
            SELECT
              class1.id AS Id,
              class1.auto AS Auto,
              class1.value1 AS Value1,
              class1.value2 AS Value2,
              class1.do_not_change AS DoNotChange
            FROM foo.class1
            WHERE
                   (@Ids IS NULL OR class1.id = ANY(@Ids))
               AND (@Value1 IS NULL OR class1.value1 = @Value1)
            ORDER BY
              class1.value1 DESC,
              class1.id ASC
            OFFSET 5
            LIMIT 10
            ";
            Check(expected, actual);
        }

        [Test]
        public void SqlBuilder_SelectMultiple_EqualsExpected()
        {
            var table1 = new SqlTable<Class1>();
            var table2 = new SqlTable<Class2>();
            var order = new
            {
                Id = new OrderItem {Direction = OrderDirection.Asc, Index = 2},
                Value1 = new OrderItem {Direction = OrderDirection.Desc, Index = 1},
                DoNotChange = (OrderItem) null
            };
            var orderMap = OrderMap.FromOrder(table1, order.GetType());
            var sqlFilter = SqlFilter.Construct(new
            {
                Ids = new[] {1, 2},
                Value1 = "foo",
                Auto = (int?) null,
                Key = Guid.Empty,
                DbGeneratedKey = 2
            });
            var whereSql = new[]
            {
                Conditions.Or(sqlFilter[f => f.Ids].IsNull(), table1[m => m.Id].EqualsAny(sqlFilter[f => f.Ids])),
                Conditions.Or(sqlFilter[f => f.Value1].IsNull(),
                    table1[m => m.Value1].EqualsOne(sqlFilter[f => f.Value1])),
                Conditions.Or(sqlFilter[f => f.Key].IsNull(), table2[m => m.Key].EqualsOne(sqlFilter[f => f.Key])),
                sqlFilter[f => f.DbGeneratedKey]
                   .IsNull()
                   .Or(table2[m => m.DbGeneratedKey].EqualsOne(sqlFilter[f => f.DbGeneratedKey]))
            };

            var sqlBuilder = SqlBuilder.Select()
               .Values(table1, table2)
               .From(table1)
               .InnerJoin(table2, table2[m => m.Key].EqualsOne(table1[m => m.Id]))
               .Where(whereSql)
               .Order(orderMap, order)
               .LimitBy((long?) null);
            var sqlOptions = new SqlOptions {Dialect = SqlDialect.Postgres95};

            var actual = sqlBuilder.BuildSql(sqlOptions);
            var expected = @"
            SELECT
	            class1.id AS Id,
	            class1.auto AS Auto,
	            class1.value1 AS Value1,
	            class1.value2 AS Value2,
	            class1.do_not_change AS DoNotChange,
	            class2.key AS Key,
	            class2.key_db_generated AS DbGeneratedKey,
	            class2.db_generated AS DbGenerated,
	            class2.value1 AS Value1,
	            class2.value2 AS Value2,
	            class2.code_generated AS CodeGenerated,
	            class2.do_not_change AS DoNotChange
            FROM foo.class1
            INNER JOIN foo.class2 ON class2.key = class1.id
            WHERE
	                 (@Ids IS NULL OR class1.id = ANY(@Ids))
	             AND (@Value1 IS NULL OR class1.value1 = @Value1)
	             AND (@Key IS NULL OR class2.key = @Key)
	             AND (@DbGeneratedKey IS NULL OR class2.key_db_generated = @DbGeneratedKey)
            ORDER BY
	            class1.value1 DESC,
	            class1.id ASC
            ";
            Check(expected, actual);
        }
        [Test]
        public void SqlBuilder_Select_AutoJoin_EqualsExpected()
        {
            var table1 = new SqlTable<Class1>();
            var table3 = new SqlTable<Class3>();
            var table4 = new SqlTable<Class4>();
          
            var sqlBuilder = SqlBuilder.Select()
               .Values(table1, table3, table4)
               .From(table1)
               .InnerJoin(table3)
               .LeftJoin(table4)
                ;
            var sqlOptions = new SqlOptions {Dialect = SqlDialect.Postgres95};

            var actual = sqlBuilder.BuildSql(sqlOptions);
            var expected = @"
            SELECT
	            class1.id AS Id,
	            class1.auto AS Auto,
	            class1.value1 AS Value1,
	            class1.value2 AS Value2,
	            class1.do_not_change AS DoNotChange,
	            class3.key AS Key,
	            class3.value1 AS Value1,
	            class4.key AS Key,
	            class4.value1 AS Value1
            FROM foo.class1
            INNER JOIN foo.class3 ON class3.key = class1.value1
            LEFT JOIN foo.class4 ON class4.key = class1.value2
            ";
            Check(expected, actual);
        }

        [Test]
        public void SqlBuilder_Update_Class1_EqualsExpected()
        {
            var table = new SqlTable<Class1>();
            var sqlBuilder = SqlBuilder.Update(table).AllUpdatableValues().WhereKeysEquals().ReturnsAutoGeneratedKeys();
            var actual = sqlBuilder.ToString();
            var expected = @"
            UPDATE foo.class1
            SET
	            value1 = @Value1,
	            value2 = @Value2
            WHERE
	            (@Id = class1.id)
            RETURNING id, auto
            ";
            Check(expected, actual);
        }


        private void Check(string expected, string actual)
        {
            Diff.Text(expected, actual, Sql.Normalize);
            Console.WriteLine("___________\nACTUAL\n");
            Console.WriteLine(actual);
            Console.WriteLine("___________\nEXPECTED\n");
            Console.WriteLine(expected);
            Assert.AreEqual(Sql.Normalize(expected), Sql.Normalize(actual));
        }
    }
}
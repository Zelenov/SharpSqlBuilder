using System.Collections.Generic;
using SharpSqlBuilder.Maps;
using SharpSqlBuilder.Operators;

namespace SharpSqlBuilder.Builders
{
    public class SqlInsertBuilderHelper<TBuilder> : SqlInsertBuilderBase where TBuilder : SqlInsertBuilderBase
    {
        public SqlInsertBuilderHelper(SqlTable sqlTable) : base(sqlTable)
        {
        }
        protected new TBuilder Values(IEnumerable<SqlColumn> sqlColumns) => (TBuilder)base.Values(sqlColumns);
        public new TBuilder CustomSql(string customSql, SqlInsertPosition? type = null) => (TBuilder)base.CustomSql(customSql, type);
        protected new TBuilder OnConflict(IEnumerable<SqlColumn> sqlColumns) => (TBuilder)base.OnConflict(sqlColumns);
        public new TBuilder OnConflict(IEnumerable<string> sqlColumns) => (TBuilder)base.OnConflict(sqlColumns);
        protected new TBuilder DoUpdate(IEnumerable<SqlColumn> sqlColumns) => (TBuilder)base.DoUpdate(sqlColumns);
        public new TBuilder DoNothing() => (TBuilder)base.DoNothing();
        protected new TBuilder Where(params Operator[] operators) => (TBuilder)base.Where(operators);
        protected new TBuilder Returns(IEnumerable<SqlColumn> sqlColumns) => (TBuilder)base.Returns(sqlColumns);
        public new TBuilder AllStaticValues() => (TBuilder)base.AllStaticValues();
        public new TBuilder OnKeysConflict() => (TBuilder)base.OnKeysConflict();
        public new TBuilder DoUpdateAllStaticColumns() => (TBuilder)base.DoUpdateAllStaticColumns();
        public new TBuilder ReturnsAutoGeneratedColumns() => (TBuilder)base.ReturnsAutoGeneratedColumns();
        public new TBuilder ReturnsAllValues() => (TBuilder)base.ReturnsAllValues();
   }
}
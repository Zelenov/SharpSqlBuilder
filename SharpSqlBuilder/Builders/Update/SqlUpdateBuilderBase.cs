using System;
using System.Collections.Generic;
using System.Linq;
using SharpSqlBuilder.Blocks;
using SharpSqlBuilder.Entities;
using SharpSqlBuilder.Extensions;
using SharpSqlBuilder.Maps;
using SharpSqlBuilder.Operators;

namespace SharpSqlBuilder.Builders
{
    public class SqlUpdateBuilderBase : SqlBuilderEntity
    {
        protected readonly UpdateColumnsBlock ColumnsBlock = new UpdateColumnsBlock();

        protected readonly Dictionary<SqlUpdatePosition, CustomSqlBlock> CustomBlocks =
            new Dictionary<SqlUpdatePosition, CustomSqlBlock>
            {
                {SqlUpdatePosition.Start, new CustomSqlBlock()},
                {SqlUpdatePosition.Table, new CustomSqlBlock()},
                {SqlUpdatePosition.Columns, new CustomSqlBlock()},
                {SqlUpdatePosition.Where, new CustomSqlBlock()},
                {SqlUpdatePosition.Return, new CustomSqlBlock()}
            };

        protected readonly SqlTable SqlTable;
        protected readonly ReturningBlock ReturningsBlock = new ReturningBlock();
        protected readonly UpdateTableBlock UpdateTableBlock;
        protected readonly WhereBlock WhereBlock = new WhereBlock();
        protected SqlUpdatePosition CurrentPosition = SqlUpdatePosition.Start;

        protected SqlUpdateBuilderBase(SqlTable sqlTable)
        {
            SqlTable = sqlTable;
            UpdateTableBlock = new UpdateTableBlock(sqlTable ?? throw new ArgumentException(nameof(sqlTable)));
            CurrentPosition = SqlUpdatePosition.Table;
        }

        public override bool Present(SqlOptions sqlOptions) =>
            UpdateTableBlock?.Present(sqlOptions) == true && ColumnsBlock.Present(sqlOptions);

        protected SqlUpdateBuilderBase CustomSql(string customSql, SqlUpdatePosition? type = null)
        {
            var customSelectType = type ?? CurrentPosition;
            var block = CustomBlocks[customSelectType];
            block.Add(new SqlCustomSqlBlock(customSql));
            return this;
        }


        protected SqlUpdateBuilderBase Values(IEnumerable<SqlColumn> sqlColumns)
        {
            ColumnsBlock.AddRange(sqlColumns.Select(m => new UpdateColumnBlock(m)));
            CurrentPosition = SqlUpdatePosition.Columns;
            return this;
        }

        protected SqlUpdateBuilderBase AllUpdatableValues() => Values(SqlTable.UpdatableColumns);

        protected SqlUpdateBuilderBase Where(params Operator[] operators) => Where((IEnumerable<Operator>)operators);

        private SqlUpdateBuilderBase Where(IEnumerable<Operator> operators)
        {
            WhereBlock.AddRange(operators);
            CurrentPosition = SqlUpdatePosition.Where;
            return this;
        }

        protected SqlUpdateBuilderBase WhereKeysEquals()
        {
            return Where(SqlTable.Keys.Select(m => m.Property().EqualsOne(m.Column())));
        }

        protected SqlUpdateBuilderBase ReturnsAutoGeneratedKeys() => Returns(SqlTable.AutoGeneratedColumns);

        protected SqlUpdateBuilderBase ReturnsAllValues() => Returns(SqlTable);

        protected SqlUpdateBuilderBase Returns(IEnumerable<SqlColumn> sqlColumns)
        {
            ReturningsBlock.AddRange(sqlColumns.Select(m => new ColumnAsPropertyEntity(m)));
            CurrentPosition = SqlUpdatePosition.Return;
            return this;
        }

        public override string BuildSql(SqlOptions sqlOptions)
        {
            if (sqlOptions == null)
                throw new ArgumentException(nameof(sqlOptions));

            CheckBeforeBuild(sqlOptions);

            IEnumerable<SqlBuilderEntity> data = new SqlBuilderEntity[]
            {
                CustomBlocks[SqlUpdatePosition.Start],
                UpdateTableBlock,
                CustomBlocks[SqlUpdatePosition.Table],
                ColumnsBlock,
                CustomBlocks[SqlUpdatePosition.Columns],
                WhereBlock,
                CustomBlocks[SqlUpdatePosition.Where],
                ReturningsBlock,
                CustomBlocks[SqlUpdatePosition.Return]
            };
            var commands = data.Where(b => CheckBlock(b, sqlOptions)).Select(b => b.BuildSql(sqlOptions, FlowOptions.Construct(this)));
            return string.Join(sqlOptions.NewLine(), commands);
        }
    }
}
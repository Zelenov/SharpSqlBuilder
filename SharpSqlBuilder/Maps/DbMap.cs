using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Linq.Expressions;
using SharpSqlBuilder.Attributes;
using SharpSqlBuilder.Extensions;

namespace SharpSqlBuilder.Maps
{
    public class DbMap : IEnumerable<DbMapItem>
    {
        public static string DefaultSchema;
        protected readonly IList<DbMapItem> Props = new List<DbMapItem>();

        protected readonly IDictionary<string, DbMapItem> PropsDictionary = new Dictionary<string, DbMapItem>();
        public readonly string Schema;
        public readonly string TableName;

        public DbMap(string schema, string tableName)
        {
            TableName = tableName ?? throw new ArgumentException(nameof(tableName));
            Schema = schema ?? DefaultSchema;
        }

        public IEnumerable<DbMapItem> AutoGenerated => Props.Where(v => v.AutoGenerated);
        public IEnumerable<DbMapItem> Keys => Props.Where(v => v.IsKey);
        public IEnumerable<DbMapItem> NotKeys => Props.Where(v => !v.IsKey);
        public IEnumerable<DbMapItem> NotAutoGenerated => Props.Where(v => !v.AutoGenerated);
        public IEnumerable<DbMapItem> StaticValues => Props.Where(v => !v.AutoGenerated);
        public IEnumerable<DbMapItem> UpdatableValues => Props.Where(v => !v.AutoGenerated && !v.IsKey && v.Update);

        public DbMapItem this[string property] => PropsDictionary[property];

        IEnumerator<DbMapItem> IEnumerable<DbMapItem>.GetEnumerator() => Props.GetEnumerator();

        public IEnumerator GetEnumerator() => ((IEnumerable) Props).GetEnumerator();

        public void AddRange(IEnumerable<DbMapItem> items)
        {
            foreach (var dbMapItem in items)
                Add(dbMapItem);
        }

        public void Add(DbMapItem dbMapItem)
        {
            PropsDictionary.Add(dbMapItem.PropertyName, dbMapItem);
            Props.Add(dbMapItem);
        }
    }


    public class DbMap<T> : DbMap
    {
        public readonly Type Type;

        public DbMap() : base(GetSchema(), GetTableName())
        {
            Type = typeof(T);
            AddRange(GetProps());
        }

        public DbMapItem this[Expression<Func<T, object>> exp] => base[exp.GetPropertyInfo().Name];

        protected IEnumerable<DbMapItem> GetProps()
        {
            var type = typeof(T);
            return type.GetProperties()
               .Where(p => p.GetAttribute<SqlIgnore>() == null)
               .Select(p => new PropertyDbMapItem(p) {Parent = this});
        }

        protected static string GetTableName()
        {
            var type = typeof(T);
            var tableNameAttr = GetAttribute<TableAttribute>(type);
            return tableNameAttr?.Name;
        }

        protected static string GetSchema()
        {
            var type = typeof(T);
            var tableNameAttr = GetAttribute<TableAttribute>(type);
            return tableNameAttr?.Schema;
        }

        public static TAttribute GetAttribute<TAttribute>(Type t) where TAttribute : Attribute
        {
            var type = typeof(TAttribute);
            var attr = (TAttribute) Attribute.GetCustomAttribute(t, type);
            return attr;
        }
    }
}